generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model User {
  id                Int        @id @default(autoincrement())
  user_email        String     @unique
  user_firstname    String
  user_lastname     String
  user_dob          DateTime   @db.Timestamptz(6)
  user_status       UserStatus @default(ACTIVE)
  user_password     String
  user_role         UserRole
  user_type         UserType
  user_affiliation  String
  created_at        DateTime   @default(now()) @db.Timestamptz(6)
  updated_at        DateTime   @updatedAt @db.Timestamptz(6)
  assigned_tickets  Ticket[]   @relation("TicketAssignee")
  submitted_tickets Ticket[]   @relation("TicketInquirer")
  closed_tickets    Ticket[]   @relation("TicketClosedBy")

  @@map("users")
}

model Concern {
  concern_id    Int          @id @default(autoincrement())
  concern_title String
  concern_faq   Json[]
  applicable_to ApplicableTo @default(ALL)
  subconcerns   subconcern[]
  tickets       Ticket[]
}

model Ticket {
  ticket_id            Int          @id @default(autoincrement())
  ticket_submitteddate DateTime     @default(now()) @db.Timestamptz(6)
  ticket_assigneddate  DateTime?    @db.Timestamptz(6)
  inquirer_id          Int
  assignee_id          Int?
  concern_id           Int
  ticket_concern       String
  ticket_subconcern    String
  ticket_details       String
  ticket_attachment    String[]
  ticket_status        TicketStatus @default(NEW)
  ticket_resolution    String?
  ticket_rating        Int?
  ticket_closedby      Int?
  ticket_resolveddate  DateTime?    @db.Timestamptz(6)
  reference_number     String?
  assignee             User?        @relation("TicketAssignee", fields: [assignee_id], references: [id])
  concern              Concern      @relation(fields: [concern_id], references: [concern_id])
  inquirer             User         @relation("TicketInquirer", fields: [inquirer_id], references: [id])
  closedby             User?        @relation("TicketClosedBy", fields: [ticket_closedby], references: [id])

  @@map("tickets")
}

model Conversation {
  conversation_id Int       @id @default(autoincrement())
  ticket_id       Int       @unique
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  updated_at      DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  messages        Message[]

  @@index([ticket_id], map: "idx_conversations_ticket_id")
  @@map("conversations")
}

model Message {
  message_id         Int          @id @default(autoincrement())
  conversation_id    Int
  user_id            Int
  message_content    String
  message_type       String?      @default("TEXT")
  message_attachment String[]     @default([])
  is_read            Boolean?     @default(false)
  created_at         DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?    @default(now()) @updatedAt @db.Timestamptz(6)
  conversation       Conversation @relation(fields: [conversation_id], references: [conversation_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([conversation_id], map: "idx_messages_conversation_id")
  @@index([created_at], map: "idx_messages_created_at")
  @@index([user_id], map: "idx_messages_user_id")
  @@map("messages")
}

model affiliation {
  affiliation_id           Int    @id @default(autoincrement())
  affiliation_name         String
  affiliation_abbreviation String
}

model subconcern {
  subconcern_id    Int      @id @default(autoincrement())
  subconcern_title String
  concern_id       Int?
  concern          Concern? @relation(fields: [concern_id], references: [concern_id])
}

enum UserStatus {
  INACTIVE
  ACTIVE
}

enum UserRole {
  INQUIRER
  DISPATCHER
  PERSONNEL
  ADMIN
}

enum UserType {
  STUDENT
  EMPLOYEE
}

enum ApplicableTo {
  ALL
  EMPLOYEE
  STUDENT
}

enum TicketStatus {
  NEW
  OPEN
  CLOSED
}
